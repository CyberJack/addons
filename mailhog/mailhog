#!/usr/bin/env bash

## Enable/disable mailhog for current project
##
## Sub-commands:
##   enable		Enable mailhog
##   disable	Disable mailhog

red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }
die () { echo -e "$1"; exit 1 }

DOCKSAL_YML=".docksal/docksal.yml"
DOCKSAL_YML_NEW=".docksal/docksal.yml.new"
DOCKSAL_ENV=".docksal/docksal.env"
DOCKSAL_STACKS="$HOME/.docksal/stacks"
PHP_INI=".docksal/etc/php/php.ini"
MAILHOG_INI="$ADDON_ROOT/conf/mailhog.ini"
MAILHOG_YML="$ADDON_ROOT/conf/mailhog.yml"

# Prepares stack to editing docksal.yml config
yml_prepare ()
{
	# Get yml version to use for a new file from existing stacks
	YML_VERSION=$(head "$DOCKSAL_STACKS/volumes-bind.yml" | grep "version")
	YML_BODY="${YML_VERSION}\nservices:"
	NEW_STACK='DOCKSAL_STACK="default"'

	# Source docksal.env
	source "$DOCKSAL_ENV" >/dev/null 2>&1

	# If DOCKSAL_STACK is not set and there is no docksal.yml or invalid docksal.yml...
	if [[ -z "$DOCKSAL_STACK" ]] && ! $(cat "$DOCKSAL_YML" 2>/dev/null | grep "services" >/dev/null); then
		echo "  Configuring to use DOCKSAL_STACK=\"default\"..."
		# Then set stack to default so we could use docksal.yml
		echo -e "$NEW_STACK" >> "$DOCKSAL_ENV"
		# Create docksal.yml
		echo -e "$YML_BODY" >> "$DOCKSAL_YML"
	fi
}

# Install tool required to edit yml from command line
yml_install_tools ()
{
	fin exec "which yaml || npm install --silent -g yaml-cli"
}

# Removes a service from docksal.yml
# $1 - service name
yml_remove_service ()
{
	[[ -z "$1" ]] && return 1
	local service="$1"
	fin exec "yaml set $DOCKSAL_YML services.$service | grep -v '$service:' | tee $DOCKSAL_YML_NEW >/dev/null"
	fin exec mv "$DOCKSAL_YML_NEW" "$DOCKSAL_YML"
}

# Set/remove proper setting into php.ini
# $1 - enable/disable
mailhog_php_support ()
{
	case "$1" in
		enable)
			# Create file if not exists
			if [[ ! -f "$PHP_INI" ]]; then
				mkdir -p $(dirname "$PHP_INI")
				echo -e "[php]\n" >> "$PHP_INI"
			fi
			# Append sendmail setting
			cat "$MAILHOG_INI" >> "$PHP_INI"
			;;
		disable)
			ini_contents=$(cat "$PHP_INI")
			# Remove all lines that present in mailhog.ini from php.ini
			# TODO: improve to remove all consequent matching lines only
			for str in $(cat "$MAILHOG_INI"); do
				ini_contents=${ini_contents/$str/}
			done
			echo -e "$ini_contents" >> "$PHP_INI"
			;;
	esac
}

# Enable container and settings
mailhog_enable ()
{
	# Double check yml is there
	if [[ ! -f "$DOCKSAL_YML" ]] || ! $(cat "$DOCKSAL_YML" | grep "services" >/dev/null); then
		echo "  ERROR: docksal.yml is invalid or not found" && exit 1
	fi

	# Check that mailhog is not already enabled
	if (fin config | grep "image: mailhog\/mailhog"); then
		echo "  Mailhog support is already enabled." && exit
	fi

	echo "  Enabling mailhog..."
	yml_prepare
	# Add mailhog service to docksal.yml
	cat "$MAILHOG_YML" >> "$DOCKSAL_YML"
	# Add php.ini setting
	mailhog_php_support enable
	# Apply stack changes
	fin up
}

# Disable container and settings
mailhog_disable ()
{
	# Make sure cli container is running
	if ! (fin ps | grep "_cli_" | grep "Up" >/dev/null); then
		echo "[PRE-UNINSTALL] ERROR: Start the project with fin start first" && exit 1
	fi

	# Make sure mailhog is installed
	if ! (fin config | grep "image: mailhog\/mailhog"); then
		echo "  Mailhog support is not enabled at the moment." && exit
	fi

	echo "  Preparing to remove mailhog..."
	yml_install_tools
	# Remove mailhog service from docksal.yml
	yml_remove_service "mail"
	# Remove php.ini setting
	mailhog_php_support disable
	# Apply stack changes
	fin up
}

#--- Begin Runtime ----#

cd "$PROJECT_ROOT"

case "$1" in
	enable)
		mailhog_enable
		;;
	disable)
		mailhog_disable
		;;
	*)
		echo "Usage: fin mailhog <enable|disable>"
		exit 1
		;;
esac
