#!/usr/bin/env bash

# CONFIG RELATED VARS
DOCKSAL_ENV=".docksal/docksal.env"
DOCKSAL_YML=".docksal/docksal.yml"
CONF_VERSION=$(head "$HOME/.docksal/stacks/volumes-bind.yml" | grep version)"\n\n"
CONF_BASE="services:\n"

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

# Error out function
die ()
{
	echo "$1"
	exit 1
}

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

# --- Begin Runtime --- #

# cd to project root
cd "$PROJECT_ROOT" || die "ERROR: Could not cd to project root"

#-- Determine and prepare project configuration
echo "[mailhog] Determining and preparing project configuration"
source "$DOCKSAL_ENV" >/dev/null 2>&1
# If DOCKSAL_STACK is not set and there is no docksal.yml then it's a zero configuration setup.
# Export default stack manually to be able to use docksal.yml to append/override stack config
# In all other cases we can already use docksal.yml
if [[ "$DOCKSAL_STACK" == "" ]] && [[ ! -f "$DOCKSAL_YML" ]]; then
	echo "Configuring to ue default DOCKSAL_STACK..."
	echo -e "\nDOCKSAL_STACK=\"default\"" | tee -a "$DOCKSAL_ENV"
fi

# Create docksal.yml if not present
[[ ! -f "$DOCKSAL_YML" ]] &&
	( echo -e "$CONF_VERSION" | tee -a "$DOCKSAL_YML" ) &&
	( echo -e "$CONF_BASE" | tee -a "$DOCKSAL_YML" )

# ENABLE MAILHOG
fin mailhog enable
